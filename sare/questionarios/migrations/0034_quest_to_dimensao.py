# -*- coding: utf-8 -*-
# Generated by Django 1.11.8 on 2018-04-13 08:37
from __future__ import unicode_literals

from django.db import migrations, transaction


def copy_src_to_dst(Source, Destination, Aux, Deco, Dsoc, Dcult, Damb, ):
    for src in Source.objects.all():
        for aux in Aux.objects.filter(cpf=src.cpf)[:1]:
            dst = Destination(
                hashId=src.hashId,
                criado_em=src.criado_em,
                fale_mais_familia=src.fale_mais_familia,
                aluno_id=aux.id,
            )
            dst.save()

            eco = Deco(
                dependentes_RBD=src.dependentes_RBD,
                origem_renda=src.origem_renda,
                renda_bruta_domiciliar=src.renda_bruta_domiciliar,
                responsavel_domicilio=src.responsavel_domicilio,
                renda_per_capita=src.renda_per_capita,
                relacao_financeira=src.relacao_financeira,
                despesas_saude_tratamento=src.despesas_saude_tratamento,
                despesas_saude_medicamento=src.despesas_saude_medicamento,
                despesas_saude_cuidador=src.despesas_saude_cuidador,
                despesas_saude_plano=src.despesas_saude_plano,
                despesas_transporte=src.despesas_transporte,
                despesas_moradia=src.despesas_moradia,
                despesas_educacao_superior=src.despesas_educacao_superior,
                despesas_educacao_basico=src.despesas_educacao_basico,
                despesas_educacao_cursinho=src.despesas_educacao_cursinho,
                despesas_educacao_capacitacao=src.despesas_educacao_capacitacao,
                despesas_educacao_material=src.despesas_educacao_material,
                despesas_bens_fcarro=src.despesas_bens_fcarro,
                despesas_bens_fmoto=src.despesas_bens_fmoto,
                despesas_bens_terreno=src.despesas_bens_terreno,
                despesas_domesticas_eletrica=src.despesas_domesticas_eletrica,
                despesas_domesticas_agua=src.despesas_domesticas_agua,
                despesas_domesticas_alimentacao=src.despesas_domesticas_alimentacao,
                questionario_id=dst.id,
            )
            eco.save()
            soc = Dsoc(
                condicao_responsavel_casa=src.condicao_responsavel_casa,
                meio_acesso_campus=src.meio_acesso_campus,
                condicao_moradia=src.condicao_moradia,
                local_moradia=src.local_moradia,
                total_pessoas_casa=src.total_pessoas_casa,
                total_comodos_casa=src.total_comodos_casa,
                total_km_casa_campus=src.total_km_casa_campus,
                instituicao_anterior=src.instituicao_anterior,
                saude_bebida_drogas=src.saude_bebida_drogas,
                saude_doenca_grave=src.saude_doenca_grave,
                saude_doenca_cronica=src.saude_doenca_cronica,
                saude_medicamento_diario=src.saude_medicamento_diario,
                pne_parcial_visao_audicao=src.pne_parcial_visao_audicao,
                pne_def_fisica=src.pne_def_fisica,
                pne_total_visao_audicao=src.pne_total_visao_audicao,
                pne_def_mental_leve=src.pne_def_mental_leve,
                pne_def_mental_grave=src.pne_def_mental_grave,
                psico_dificuldade_concentrar=src.psico_dificuldade_concentrar,
                psico_conflito_familiar=src.psico_conflito_familiar,
                psico_depressao=src.psico_depressao,
                questionario_id=dst.id,
            )
            soc.save()
            cult = Dcult(
                cor_raca=src.cor_raca,
                violencia_verbal=src.violencia_verbal,
                violencia_urbana=src.violencia_urbana,
                violencia_patrimonial=src.violencia_patrimonial,
                violencia_cyberbulling=src.violencia_cyberbulling,
                violencia_religiosa=src.violencia_religiosa,
                violencia_assedio_moral=src.violencia_assedio_moral,
                violencia_abandono=src.violencia_abandono,
                violencia_abuso_familiar=src.violencia_abuso_familiar,
                violencia_atentado_pudor=src.violencia_atentado_pudor,
                violencia_trafico_humano=src.violencia_trafico_humano,
                violencia_psicologica_moral=src.violencia_psicologica_moral,
                violencia_fisica=src.violencia_fisica,
                violencia_sexual=src.violencia_sexual,
                preconceito_cultural=src.preconceito_cultural,
                preconceito_estetico=src.preconceito_estetico,
                preconceito_economico=src.preconceito_economico,
                preconceito_religioso=src.preconceito_religioso,
                preconceito_mental=src.preconceito_mental,
                preconceito_racial=src.preconceito_racial,
                preconceito_genero=src.preconceito_genero,
                preconceito_orientacao_sexual=src.preconceito_orientacao_sexual,
                questionario_id=dst.id,
            )
            cult.save()
            amb = Damb(
                forma_descarte_lixo=src.forma_descarte_lixo,
                percepcao_seguranca_bairro=src.percepcao_seguranca_bairro,
                questionario_id=dst.id
            )

            amb.save()

            dst.economica = eco
            dst.social = soc
            dst.ambiental = amb
            dst.cultural = cult
            dst.save()

            # dst.aluno_id.set(aux)
            # src.delete()


def forward_quest_to_new(apps, schema_editor):
    """"
        para cada questionario, instanciar um mti com os atributos
        salvar o mti
        associar os alunos do questionario com os alunos mti
        """
    copy_src_to_dst(
        apps.get_model('questionarios', 'QuestionarioOld'),
        apps.get_model('questionarios', 'Questionario'),
        apps.get_model('core', 'Aluno'),
        apps.get_model('questionarios', 'DimensaoEconomica'),
        apps.get_model('questionarios', 'DimensaoSocial'),
        apps.get_model('questionarios', 'DimensaoCultural'),
        apps.get_model('questionarios', 'DimensaoAmbiental'),
    )


def backward_quest_to_new(apps, schema_editor):
    copy_src_to_dst(
        apps.get_model('questionarios', 'QuestionarioOld'),
        apps.get_model('questionarios', 'Questionario'),
        apps.get_model('core', 'Aluno'),
        apps.get_model('questionarios', 'DimensaoEconomica'),
        apps.get_model('questionarios', 'DimensaoSocial'),
        apps.get_model('questionarios', 'DimensaoCultural'),
        apps.get_model('questionarios', 'DimensaoAmbiental'),
    )


class Migration(migrations.Migration):
    atomic = False

    dependencies = [
        ('core', '0002_quest_to_aluno'),
        ('questionarios', '0033_dimensaoambiental_dimensaocultural_dimensaoeconomica_dimensaosocial_questionario'),
    ]

    operations = [
        migrations.RunPython(forward_quest_to_new,
                             backward_quest_to_new)
    ]
